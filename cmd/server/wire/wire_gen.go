// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"projectName/internal/handler"
	"projectName/internal/job"
	"projectName/internal/repository"
	"projectName/internal/server"
	"projectName/internal/service"
	"projectName/internal/service/article"
	"projectName/internal/service/user"
	"projectName/pkg/app"
	"projectName/pkg/jwt"
	"projectName/pkg/log"
	"projectName/pkg/server/http"
	"projectName/pkg/sid"
	"time"
)

// Injectors from wire.go:

// NewWire 是 Wire 的生成函数，用于构建 App 实例及其依赖
func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(logger)
	duration := ProvideCaptchaExpireDuration()
	captchaService := user.NewCaptchaService(duration)
	db := repository.NewDB(viperViper, logger)
	client := repository.NewRedis(viperViper)
	elasticClient := repository.NewESClient(viperViper)
	repositoryRepository := repository.NewRepository(logger, db, client, elasticClient)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := user.NewUserService(serviceService, userRepository, captchaService)
	userHandler := handler.NewUserHandler(handlerHandler, captchaService, userService)
	collegeRepository := repository.NewCollegeRepository(repositoryRepository)
	collegeService := user.NewCollegeService(serviceService, collegeRepository)
	collegeHandler := handler.NewCollegeHandler(handlerHandler, collegeService)
	articleRepository := repository.NewArticleRepository(repositoryRepository)
	articleService := article.NewArticleService(serviceService, articleRepository, userRepository)
	articleHandler := handler.NewArticleHandler(handlerHandler, articleService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, userHandler, collegeHandler, articleHandler)
	jobJob := job.NewJob(transaction, logger, sidSid)
	userJob := job.NewUserJob(jobJob, userRepository)
	jobServer := server.NewJobServer(logger, userJob)
	appApp := newApp(httpServer, jobServer)
	return appApp, func() {
	}, nil
}

// wire.go:

// ProvideCaptchaExpireDuration 用于提供 time.Duration 类型的实例
func ProvideCaptchaExpireDuration() time.Duration {
	return 1 * time.Minute
}

// 提供 repository 层的实例
var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewESClient, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewCollegeRepository, repository.NewArticleRepository)

// 提供 service 层的实例
var serviceSet = wire.NewSet(service.NewService, user.NewUserService, ProvideCaptchaExpireDuration, user.NewCaptchaService, user.NewCollegeService, article.NewArticleService)

// 提供 handler 层的实例
var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewCollegeHandler, handler.NewArticleHandler)

// 提供 job 层的实例
var jobSet = wire.NewSet(job.NewJob, job.NewUserJob)

// 提供 server 层的实例
var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJobServer)

// newApp 用于构建 App 实例
func newApp(
	httpServer *http.Server,
	jobServer *server.JobServer,
) *app.App {
	return app.NewApp(app.WithServer(httpServer, jobServer), app.WithName("demo-server"))
}
